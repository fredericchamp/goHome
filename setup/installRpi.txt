########################################################
##
## Install from zero on RPI2B with clean img
## tested with 2016-11-25-raspbian-jessie-lite.zip
##

########################################################
# 1st 
sudo raspi-config
# change 
#	pi password (default = raspberry)
#	hostname
#	local
#	timezone
#	...
#	Interfacing Options -> Serial -> disable ... /!\ After that set "enable_uart=1" in /boot/config.txt
#	Recommended : activate SSH

########################################################
# Update the raspberry

# firmware
sudo apt-get install rpi-update
sudo rpi-update

# linux and other
sudo apt-get update
sudo apt-get upgrade
sudo apt-get dist-upgrade

########################################################
# Install needed packages
sudo apt-get install git
sudo apt-get install sqlite3
sudo apt-get install minicom

# Remove 
sudo apt-get autoremove
sudo apt-get autoclean

# rpi-clone : easy backup for all SD card
mkdir /home/pi/downloads
cd /home/pi/downloads
git clone https://github.com/billw2/rpi-clone.git
sudo cp rpi-clone/rpi-clone /usr/local/bin/rpi-clone

# h264 encoding (and others) : libav-tools (fork from ffmpeg ) https://wiki.debian.org/ffmpeg
sudo apt-get install libav-tools

# webcam motion detection and streaming
# Start at boot time + auto restart
# See .../goHome/setup/setup.sh : motion.service + systemctl setup
sudo apt-get install motion

# Image convert (see .../goHome/script/newSnap.sh)
sudo apt-get install imagemagick

# Recommanded for easy disk mount
sudo apt-get install sshfs
# Mount : sshfs remote-username@remote-server-name:<remote dir> <local mount point>
# Umount : fusermount -u <local mount point>

#
# Go lang
#
# sudo apt-get install golang : currently install go1.3 on raspberry pi, we need at least go1.6
# Download from https://storage.googleapis.com/golang and install to default dir (/usr/local/go)
#
cd /usr/local
sudo wget https://storage.googleapis.com/golang/go1.7.linux-armv6l.tar.gz
sudo tar xzf go1.7.linux-armv6l.tar.gz
sudo rm -f go1.7.linux-armv6l.tar.gz

# Add /usr/local/go/bin to default PATH, or create links :
sudo ln -s /usr/local/go/bin/* /usr/local/bin

########################################################
# Retreive goHome

# Create dir :
mkdir -p ~/Projets/go/

# set default GOPATH
sudo /bin/bash -c 'echo "export GOPATH=/home/pi/Projets/go" > /etc/profile.d/golang.sh'
. /etc/profile.d/golang.sh

# Get goHome sources and dependencies (may be long as this will build goHome and all dependencies)
cd ${GOPATH}
go get github.com/fredericchamp/goHome


########################################################
# Setup 

# goHome env & dir (must match parameters in .../goHome/setup/init.sql)
${GOPATH}/src/github.com/fredericchamp/goHome/setup/setup.sh

# Database
# See .../goHome/setup/init.sql 
# 	update init.sql to match you needs or better create a file private.sql to store your own param

# Start at boot time + auto restart
# See .../goHome/script/setup.sh : goHome.service + systemctl setup


########################################################
# Setup SSL cert for web server
#
# 'security' model is base on certificates : 
#    Server cert for HTTPS/TLS
#    Client cert required and check at user connexion time => no server side password managment
#    Client identification base on email form cert vs email in user record in DB
#
# Warning : pay attention to file access rights ! Any user with read access to the key can use a certificate
# Default cert files are (can be change using parameter in DB)
# .../goHome/certificats/server.crt.pem and .../goHome/certificats/server.key.pem
#
# For let's encrypt cert use : /etc/letsencrypt/live/<your domain>/fullchain.pem 
#                        and : /etc/letsencrypt/live/<your domain>/privkey.pem
#                        + : crontab : 0 0,12 * * * python -c 'import random; import time; time.sleep(random.random() * 3600)' && ./path/to/certbot-auto renew 


# For client cert see .../goHome/certificats/clientCert.sh


########################################################



sudo reboot

# Check installation
curl ... goHome
curl ... motion



########################################################
# ssh acces : replace password with totp)
#

sudo apt-get install libpam-google-authenticator

# Create key
$ google-authenticator 

# Config example : add at the beging of /etc/pam.d/sshd

# if Google Authenticator Ok then return OK
auth   sufficient  /lib/security/pam_google_authenticator.so
# if fail then KO and pan_deny always fail
auth   requisite   pam_deny.so

# In /etc/ssh/sshd_config check :
# ChallengeResponseAuthentication no

# Restart ssh service
sudo systemctl restart ssh.service




